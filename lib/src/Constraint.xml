<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<module xmlns="http://www.kinoma.com/kpr/1">

    <require id="Vector" path="Vector"/>

    <variable id="NONE" value="'none'"/>
    <variable id="SELECTED" value="'selected'"/>
    <variable id="HIGHLIGHTED" value="'highlighted'"/>

    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- Constraint class -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
    <class id="Constraint">
        <field id="points"/>
        <field id="delta"/>
        <field id="constraints"/>
        <field id="selection"/>
        
        <constructor params="p1, p2">
            <![CDATA[
                this.points = [p1,p2];
                this.delta = Vector.newInstance(); 
                this.constraints = new Object();
                this.selection = NONE;

                this.update();
            ]]>
        </constructor>
        
        <method id="scale" params="scale"/>
        <method id="constrain"/>
        <method id="initializeConstraints" params="constraints"/>
        
        <method id="setSelectionState" params="state">
            <![CDATA[
                this.selection = state;
            ]]>
        </method>
        <method id="contains" params="pm">
            <![CDATA[
                return this.p1 == pm || this.p2 == pm;
            ]]>
        </method>
        <method id="update">
            <![CDATA[
                this.delta.set( this.p2.position ); 
                this.delta.sub( this.p1.position ); 

                this.initializeConstraints( this.constraints );
            ]]>
        </method>
        <method id="preDraw" params="ctx, scale">
            <![CDATA[
                ctx.lineWidth = 1;
                ctx.strokeStyle = this.selection == SELECTED ? '#ff0000' : '#000000';
            ]]>
        </method>

        <method id="postDraw" params="ctx, scale"/>

        <method id="draw" params="ctx, scale">
            <![CDATA[
                this.preDraw( ctx, scale );
                
                ctx.beginPath();
                ctx.moveTo( this.p1.position.x * scale, this.p1.position.y * scale );
                ctx.lineTo( this.p2.position.x * scale, this.p2.position.y * scale);
                ctx.stroke();
                
                this.postDraw( ctx, scale );
            ]]>
        </method>
        <getter id="p1">
            <![CDATA[
                return this.points[0];
            ]]>
        </getter>
        <getter id="p2">
            <![CDATA[
                return this.points[1];
            ]]>
        </getter>
    </class>

    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- Elastic Constraint class -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
    <variable id="ELASTIC" value="'elastic'"/>

    <class id="Elastic" like="Constraint">
        <field id="short"/>
        <field id="long"/>
        
        <constructor params="p1, p2, short, long">
            <![CDATA[
                this.short = short || 0;
                this.long = long || 0;
            
                Constraint.call( this, p1, p2 );
            ]]>
        </constructor>
        <method id="initializeConstraints" params="constraints">
            <![CDATA[
                constraints.short = this.delta.length() * this.short;
                constraints.shortSquared = constraints.short * constraints.short;
                constraints.long = this.delta.length() * this.long;
                constraints.longSquared = constraints.long * constraints.long;
            ]]>
        </method>
        <method id="setConstraints" params="short, long">
            <![CDATA[
                this.short = short;
                this.long = long;
                
                this.constraints.short = this.short;
                this.constraints.shortSquared = this.constraints.short * this.constraints.short;
                this.constraints.long = this.long;
                this.constraints.longSquared = this.constraints.long * this.constraints.long;
            ]]>
        </method>
        <method id="scale" params="scale">
            <![CDATA[
                this.constraints.short *= scale;
                this.constraints.shortSquared = this.constraints.short * this.constraints.short;
                this.constraints.long *= scale;
                this.constraints.longSquared = this.constraints.long * this.constraints.long;
            ]]>
        </method>
        <method id="constrain">
            <![CDATA[
                var scale = null;
                
                this.delta.set( this.p2.position ); 
                this.delta.sub( this.p1.position ); 
    
                var dp = this.delta.dotProd( this.delta );
            
                if( this.constraints.short != 0 && dp < this.constraints.shortSquared )
                    scale = this.constraints.shortSquared / (dp + this.constraints.shortSquared) - 0.5;

                else if( this.constraints.long != 0 && dp > this.constraints.longSquared)
                    scale = this.constraints.longSquared / (dp + this.constraints.longSquared) - 0.5;
                    
                this.delta.scale( scale );
                
                if( this.p1.anchor == false )
                   this.p1.position.sub( this.delta );
                   
                if( this.p2.anchor == false )
                   this.p2.position.add( this.delta ); 
            ]]>
        </method>
        <method id="postDraw" params="ctx, scale">
            <![CDATA[
                var middle = Vector.newInstance( this.p1.position.x, this.p1.position.y );
                var t = Vector.newInstance( this.p2.position.x, this.p2.position.y );
                
                t.sub( middle );
                t.scale( 0.5 );
                  
                middle.add( t );
            
                t.set( middle );
                t.sub( this.p1.position );
            
                ctx.lineWidth = 1;
            
                // long const bar
                t.normalize();
                t.scale( this.constraints.long * 0.5 );
                
                var t1 = middle.x + t.x;
                var t2 = middle.y + t.y;
                var t3 = middle.x - t.x;
                var t4 = middle.y - t.y;
            
                ctx.strokeStyle = '#dfdfdf';
                ctx.beginPath();
                ctx.moveTo( this.p1.position.x * scale, this.p1.position.y * scale);
                ctx.lineTo( t3 * scale, t4 * scale );
                ctx.moveTo( this.p2.position.x * scale, this.p2.position.y * scale);
                ctx.lineTo( t1 * scale, t2 * scale );
                ctx.stroke();
                
                var k = Vector.newInstance( t.x, t.y );

                k.normalize();
                k.scale( 0.01 );
                
                var x = -k.y;
                var y = k.x;
                
                ctx.strokeStyle = '#0000ff';
                ctx.beginPath();
                ctx.moveTo((t1 + x) * scale, (t2 + y) * scale);
                ctx.lineTo((t1 - x) * scale, (t2 - y) * scale);
                ctx.stroke();
                ctx.beginPath();
                ctx.moveTo((t3 + x) * scale, (t4 + y) * scale);
                ctx.lineTo((t3 - x) * scale, (t4 - y) * scale);
                ctx.stroke();
            
                // short const bar
                t.normalize();
                t.scale( this.constraints.short * 0.5 );
            
                t1 = middle.x + t.x;
                t2 = middle.y + t.y;
                t3 = middle.x - t.x;
                t4 = middle.y - t.y;
            
                ctx.strokeStyle = '#ff0000';
                ctx.beginPath();
                ctx.moveTo((t1 + x) * scale, (t2 + y) * scale);
                ctx.lineTo((t1 - x) * scale, (t2 - y) * scale);
                ctx.stroke();
                ctx.beginPath();
                ctx.moveTo((t3 + x) * scale, (t4 + y) * scale);
                ctx.lineTo((t3 - x) * scale, (t4 - y) * scale);
                ctx.stroke();
            ]]>
        </method>
        <method id="save">
            <![CDATA[
                var data = new Object();
                
                data.type = TYPE;
                data.p1 = this.p1.id;
                data.p2 = this.p2.id;
                data.short = this.short;
                data.long = this.long;
                
                return data;
            ]]>
        </method>
    </class>

    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- Stick Constraint class -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
    <variable id="STICK" value="'stick'"/>

    <class id="Stick" like="Constraint">
        <constructor params="p1, p2">
            <![CDATA[
                Constraint.call( this, p1, p2 );
            ]]>
        </constructor>
        <method id="initializeConstraints" params="constraints">
            <![CDATA[
                constraints.length = this.p1.position.distance( this.p2.position );
                constraints.lengthSquared = this.constraints.length * this.constraints.length; 
            ]]>
        </method>
        <method id="scale" params="scale">
            <![CDATA[
                this.constraints.length *= scale;
                this.constraints.lengthSquared = this.constraints.length * this.constraints.length; 
            ]]>
        </method>
        <method id="constrain">
            <![CDATA[
                    this.delta.set( this.p2.position ); 
                    this.delta.sub( this.p1.position ); 

                    var dp = this.delta.dotProd( this.delta );
                    var scale = this.constraints.lengthSquared / (dp + this.constraints.lengthSquared) - 0.5; 
                    
                    this.delta.scale( scale );
   
                    if( this.p1.anchor == false )
                       this.p1.position.sub( this.delta ); 
                       
                    if( this.p2.anchor == false )
                       this.p2.position.add( this.delta );
                ]]>
        </method>
        <method id="save">
            <![CDATA[
                var data = new Object();
                
                data.type = TYPE;
                data.p1 = this.p1.id;
                data.p2 = this.p2.id;
                
                return data;
            ]]>
        </method>
        <method id="preDraw" params="ctx, scale">
            <![CDATA[
                Constraint.prototype.preDraw.call( this, ctx, scale );
            
                ctx.lineWidth = 2;
            ]]>
        </method>
    </class>

</module>
